import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { useUserRole } from '@/hooks/useUserRole';
import Header from '@/components/Header';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { ArrowLeft, Users, Plus, Copy, Trash2 } from 'lucide-react';
import { toast } from 'sonner';

interface Class {
  id: string;
  name: string;
  school_name: string;
  description: string;
  join_code: string;
  created_at: string;
  member_count?: number;
}

export default function TeacherDashboard() {
  const navigate = useNavigate();
  const { role, loading: roleLoading } = useUserRole();
  const [classes, setClasses] = useState<Class[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    school_name: '',
    description: '',
    verification_code: ''
  });

  useEffect(() => {
    if (!roleLoading && role !== 'teacher') {
      navigate('/');
      toast.error('Access denied. Teachers only.');
    }
  }, [role, roleLoading, navigate]);

  useEffect(() => {
    if (role === 'teacher') {
      fetchClasses();
    }
  }, [role]);

  const fetchClasses = async () => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return;

    const { data, error } = await supabase
      .from('classes')
      .select('*')
      .eq('teacher_id', user.id)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching classes:', error);
      toast.error('Failed to load classes');
    } else {
      // Fetch member counts for each class
      const classesWithCounts = await Promise.all(
        (data || []).map(async (cls) => {
          const { count } = await supabase
            .from('class_members')
            .select('*', { count: 'exact', head: true })
            .eq('class_id', cls.id);
          return { ...cls, member_count: count || 0 };
        })
      );
      setClasses(classesWithCounts);
    }
    setLoading(false);
  };

  const handleCreateClass = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate verification code
    if (formData.verification_code !== '2243' && formData.verification_code !== '4422') {
      toast.error('Invalid verification code. Please contact your administrator.');
      return;
    }
    
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return;

    const { error } = await supabase
      .from('classes')
      .insert([{
        name: formData.name,
        school_name: formData.school_name,
        description: formData.description,
        teacher_id: user.id,
        join_code: '' // Will be auto-generated by trigger
      }]);

    if (error) {
      console.error('Error creating class:', error);
      toast.error('Failed to create class');
    } else {
      toast.success('Class created successfully!');
      setFormData({ name: '', school_name: '', description: '', verification_code: '' });
      setShowCreateForm(false);
      fetchClasses();
    }
  };

  const handleDeleteClass = async (classId: string) => {
    if (!confirm('Are you sure you want to delete this class?')) return;

    const { error } = await supabase
      .from('classes')
      .delete()
      .eq('id', classId);

    if (error) {
      console.error('Error deleting class:', error);
      toast.error('Failed to delete class');
    } else {
      toast.success('Class deleted successfully');
      fetchClasses();
    }
  };

  const copyJoinCode = (code: string) => {
    navigator.clipboard.writeText(code);
    toast.success('Join code copied!');
  };

  if (roleLoading || loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5 flex items-center justify-center">
        <p className="text-muted-foreground">Loading...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <Header />
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        <Button
          variant="ghost"
          onClick={() => navigate('/')}
          className="mb-6"
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Game
        </Button>

        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">Teacher Dashboard</h1>
          <p className="text-muted-foreground">Manage your classes and track student progress</p>
        </div>

        <div className="mb-6">
          <Button onClick={() => setShowCreateForm(!showCreateForm)}>
            <Plus className="mr-2 h-4 w-4" />
            Create New Class
          </Button>
        </div>

        {showCreateForm && (
          <Card className="mb-8">
            <CardHeader>
              <CardTitle>Create New Class</CardTitle>
              <CardDescription>Set up a new class for your students</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleCreateClass} className="space-y-4">
                <div>
                  <Label htmlFor="verification_code">Verification Code *</Label>
                  <Input
                    id="verification_code"
                    type="password"
                    value={formData.verification_code}
                    onChange={(e) => setFormData({ ...formData, verification_code: e.target.value })}
                    placeholder="Enter verification code"
                    required
                  />
                  <p className="text-xs text-muted-foreground mt-1">Contact your administrator for the code</p>
                </div>
                <div>
                  <Label htmlFor="name">Class Name *</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    placeholder="e.g., Spanish 101"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="school_name">School Name</Label>
                  <Input
                    id="school_name"
                    value={formData.school_name}
                    onChange={(e) => setFormData({ ...formData, school_name: e.target.value })}
                    placeholder="e.g., Lincoln High School"
                  />
                </div>
                <div>
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    placeholder="Brief description of the class"
                  />
                </div>
                <div className="flex gap-2">
                  <Button type="submit">Create Class</Button>
                  <Button type="button" variant="outline" onClick={() => setShowCreateForm(false)}>
                    Cancel
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        )}

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {classes.map((cls) => (
            <Card key={cls.id}>
              <CardHeader>
                <CardTitle>{cls.name}</CardTitle>
                {cls.school_name && (
                  <CardDescription>{cls.school_name}</CardDescription>
                )}
              </CardHeader>
              <CardContent className="space-y-4">
                {cls.description && (
                  <p className="text-sm text-muted-foreground">{cls.description}</p>
                )}
                <div className="flex items-center gap-2 text-sm">
                  <Users className="h-4 w-4" />
                  <span>{cls.member_count} student{cls.member_count !== 1 ? 's' : ''}</span>
                </div>
                <div className="space-y-2">
                  <Label className="text-xs text-muted-foreground">Join Code</Label>
                  <div className="flex gap-2">
                    <Input
                      value={cls.join_code}
                      readOnly
                      className="font-mono text-lg font-bold"
                    />
                    <Button
                      size="icon"
                      variant="outline"
                      onClick={() => copyJoinCode(cls.join_code)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                <Button
                  variant="destructive"
                  size="sm"
                  className="w-full"
                  onClick={() => handleDeleteClass(cls.id)}
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete Class
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>

        {classes.length === 0 && !showCreateForm && (
          <Card>
            <CardContent className="py-12 text-center">
              <p className="text-muted-foreground mb-4">No classes yet. Create your first class to get started!</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
